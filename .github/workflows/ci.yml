name: CI Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Code formatting check
      run: |
        make format
        # Check if formatting changed any files
        git diff --exit-code
    
    - name: Lint with flake8
      run: make lint
    
    - name: Type check with mypy
      run: make typecheck
    
    - name: Run tests with coverage
      run: make coverage
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security scan with bandit
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-validation:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Validate package can be imported
      run: |
        cd src
        python -c "from bundle import Bundle, BundlePriority; print('✅ Package imports successfully')"
    
    - name: Run integration tests
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from bundle import Bundle, BundlePriority
        
        # Create a test bundle
        bundle = Bundle(
            source='ci-test',
            destination='validation',
            payload=b'CI pipeline test',
            ttl_seconds=3600,
            priority=BundlePriority.HIGH
        )
        
        # Test serialization round-trip
        serialized = bundle.serialize()
        deserialized = Bundle.deserialize(serialized)
        
        assert bundle.id == deserialized.id
        assert bundle.payload == deserialized.payload
        assert bundle.priority == deserialized.priority
        
        print('✅ Integration test passed')
        "